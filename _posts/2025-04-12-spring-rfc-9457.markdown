---
layout: post
title:  "Spring, errors and RFC 9457"
date:   2025-04-12 14:00:00 +0300
categories: [java]
---

# Проблема

При дизайне java-приложения, разработчику необходимо проектировать обработку ошибок.
По моим наблюдениям, наиболее частое решение это использование
[ExceptionHandler](https://www.baeldung.com/exception-handling-for-rest-with-spring).
Проблемы такого подхода в том, что очень часто это приводит к разрастанию ExceptionHandler
до сотен строк, что затрудняет поддержку. Дополнительные проблемы с поддержкой идут из того
факта, что при таком подходе системные ошибки обрабатываеются в том же слое логики что и
бизнес-ошибки. Например, обработчик ошибки слоя данных `Constraint violation` может соседствовать
с обработчиком ошибки контракта `Unsupported HTTP method`, и с ошибкой бизнес-логики
`requested entity not found`. И, наконец, добавляет проблем тот фактор, что Exception-ы наследуются
друг от друга, и разработчики, как правило, стараются поддерживать иерархию наследования,
просто потому, что она есть, и, как следствие, это наследованиеи затрудняет поддержку обработчиков
бизнес-ошибок.

В данной статье я предлагаю рассмотреть новый подход, который совмещает новые возможности
Spring 6 [ResponseEntityExceptionHandler](https://docs.spring.io/spring-framework/docs/6.0.0/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html)
и Java 17 - [Sealed classes](https://docs.oracle.com/en/java/javase/17/language/sealed-classes-and-interfaces.html)

# Постановка задачи для демо-проекта

1. Все ошибки от сервиса должны иметь одинаковую модель данных, и возвращаться в виде json
2. Ошибки должны разделяться на 2 типа: `BUSINESS` и `SYSTEM` для того чтобы указать потребителю как
   реагировать на них. Ошибки с типом `SYSTEM` указывают на нерпедвиденные ошибки в приложении,
   например, потеря соединения с базой данных, которые могут быть исправлены повтором запроса.
   Ошибки с типом `BUSINESS` указывают на все остальные ошибки - нарушение контракта, неправильная
   последовательность вызова методов и т.п.
3. Как разработчик, я хочу иметь механизм обработки бизнес ошибок, который не будет конфликтовать
   с обработчиком системных ошибок.

# Решения

## 1. Переиспользование ProblemDetail для сокращения количества ExceptionHandler методов

Spring-web 6 уже поставляет инструменты для упрощенной обработки большого количества исключений,
связанных с http - ошибки приводятся к типу ProblemDetail, который содержит в том числе и http
status code (полезно, чтобы не держать эти числа в голове)

### Добавим Exception Hanlder, который обработает все стандартные исключения:

```java
@ControllerAdvice
public class Rfc9457ExceptionHandler extends ResponseEntityExceptionHandler {
}
```

Вот и всё. Теперь этот контроллер обработает следующие исключения:
```
HttpRequestMethodNotSupportedException.class
HttpMediaTypeNotSupportedException.class
HttpMediaTypeNotAcceptableException.class
MissingPathVariableException.class
MissingServletRequestParameterException.class
MissingServletRequestPartException.class
ServletRequestBindingException.class
MethodArgumentNotValidException.class
HandlerMethodValidationException.class
NoHandlerFoundException.class
NoResourceFoundException.class
AsyncRequestTimeoutException.class
ErrorResponseException.class
MaxUploadSizeExceededException.class
ConversionNotSupportedException.class
TypeMismatchException.class
HttpMessageNotReadableException.class
HttpMessageNotWritableException.class
MethodValidationException.class
AsyncRequestNotUsableException.class
```

### Приведение ошибок к необходимой структуре данных

Создадим класс ErrorDto, и приведём ошибки к этому типу, переопределяя методы
`ResponseEntityExceptionHandler`:

```java
package com.github.hdghg.demo.dto;

import org.springframework.http.ProblemDetail;

import javax.annotation.Nonnull;
import java.util.Objects;

public record ErrorDto(@Nonnull Type type, @Nonnull String detail) {

    public enum Type {
        BUSINESS, SYSTEM
    }

    public static ErrorDto fromProblemDetail(@Nonnull ProblemDetail problemDetail) {
        var detail = Objects.requireNonNullElse(problemDetail.getDetail(), "Error");
        return new ErrorDto(Type.BUSINESS, detail);
    }
}
```

```java
package com.github.hdghg.demo.rest;

import com.github.hdghg.demo.dto.ErrorDto;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ProblemDetail;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import javax.annotation.Nonnull;
import javax.annotation.meta.When;

@ControllerAdvice
@Order(1)
public class Rfc9457ExceptionHandler extends ResponseEntityExceptionHandler {

    @Override
    @Nonnull
    protected ResponseEntity<Object> createResponseEntity(
            @Nonnull(when = When.MAYBE) Object body,
            @Nonnull HttpHeaders headers,
            @Nonnull HttpStatusCode statusCode,
            @Nonnull WebRequest request
    ) {
        if (body instanceof ProblemDetail problemDetail) {
            return ResponseEntity.status(problemDetail.getStatus())
                    .body(ErrorDto.fromProblemDetail(problemDetail));
        } else {
            return super.createResponseEntity(body, headers, statusCode, request);
        }
    }
}
```

### Расширение

Расширение Rfc9457ExceptionHandler необходимо только в том случае, когда ожидается нестандартная
обработка исключений, которые он обрабатывает. Для расширения достаточно переопределить метод,
отвечающий за обработку соответствующего исключения. Например, 
[handleHttpRequestMethodNotSupported](https://docs.spring.io/spring-framework/docs/6.0.0/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.html#handleHttpRequestMethodNotSupported(org.springframework.web.HttpRequestMethodNotSupportedException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatusCode,org.springframework.web.context.request.WebRequest))

## 2. Обработка остальных исключений

### Добавим код

Используется классический подход к обработке исключений, но здесь не будет обработчиков
бизнес-исключений и http-исключений, поэтому код очень короткий:

```java
package com.github.hdghg.demo.rest;

import com.github.hdghg.demo.dto.ErrorDto;
import jakarta.validation.ConstraintViolationException;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@RestController
@ControllerAdvice
@Order(2)
public class GlobalExceptionHandler {

    /**
     * ConstraintViolationException может быть брошен spring-фреймворком в любом слое приложения,
     * поэтому, он не отлавливается в ResponseEntityExceptionHandler. Тем не менее,
     */
    @ExceptionHandler
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ErrorDto constraintViolationException(ConstraintViolationException e) {
        return new ErrorDto(ErrorDto.Type.BUSINESS, e.getMessage());
    }

    /**
     * Указываем order 2 на классе для того, чтобы этот
     * exception handler имел меньший приоритет чем Rfc9457ExceptionHandler
     */
    @ExceptionHandler
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ErrorDto exception(Exception e) {
        return new ErrorDto(ErrorDto.Type.SYSTEM, e.getMessage());
    }

}
```

### Расширение

Расширение GlobalExceptionHandler происходит добавлением методов-обработчиков в тело класса.
Здесь, по необходимости, предлагается добавлять методы-обработчики для системных исключений,
котоырые не возникают при нормальной работе приложения. Например, IOException.

## 3. Использование sealed classes как замена exception для бизнес-ошибок

Преимущества этого подхода в том, что
1. В нем нет иерархии наследования Exception-типов, а значит, нельзя пропустить обработку одного
   или нескольких ответов. Это особенно актуально в связи с распространением способов пропустить
   обработку даже checked exceptions.
2. Такой код может читать человек далёкий от разработки, или не знакомый со spring. Такой код
   можно показывать бизнес- или системным аналитикам, сокращая привлечение разработчиков
   к задачам аналитики.

### Код сервиса (или usecase-а)

```java
package com.github.hdghg.demo.service;

import javax.annotation.Nonnull;

public interface DemoService {

    Result prepareGreeting(@Nonnull String name);

    sealed interface Result {
    }

    record Success(@Nonnull String data) implements Result {
    }

    record UserIsNotWelcome() implements Result {
    }

}
```
Как видно из интерфейса, метод prepareGreeting задает явно какие типы ответа он может вернуть.
Опыт показывает, что в реальном мире, как правило, Result имеет 1 реализацию для успешного ответа
и 1-3 реализаций различных бизнес-ошибок.

### Код контроллера

```java
package com.github.hdghg.demo.rest;

import com.github.hdghg.demo.dto.ErrorDto;
import com.github.hdghg.demo.service.DemoService;
import jakarta.validation.constraints.Size;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Nonnull;
import javax.annotation.meta.When;

@RestController
@Validated
public class DemoController {

    @Autowired
    private DemoService demoService;

    @GetMapping("/hello")
    public ResponseEntity<String> hello(@RequestParam("name") @Size(min = 1) String name) {
        DemoService.Result result = demoService.prepareGreeting(name);
        // --enable-preview allows to use pattern matching in Java 17
        return switch (result) {
            case DemoService.Success success -> ResponseEntity.ok(success.data());
            case DemoService.UserIsNotWelcome ignored -> errorDto(null, "Come back later", null);
        };
    }

    @SuppressWarnings("unchecked")
    private <T> T errorDto(
            @Nonnull(when = When.MAYBE) ErrorDto.Type type,
            @Nonnull(when = When.MAYBE) String detail,
            @Nonnull(when = When.MAYBE) HttpStatus status
    ) {
        type = type != null ? type : ErrorDto.Type.BUSINESS;
        status = status != null ? status : HttpStatus.BAD_REQUEST;
        detail = detail != null ? detail : status.getReasonPhrase();

        var dto = new ErrorDto(type, detail);
        return (T) ResponseEntity.status(status).body(dto);
    }
}
```

Метод hello содержит код, который делегирует исполнение запроса сервису, а затем обрабатывает
полученный результат.

Метод errorDto формирует сообщение об ошибке. Оно имеет всё тот же тип ErrorDto, за счёт чего
достигается требование 1 - все ошибки имеют единую модель данных. Type erasure позвоялет
без опасений приводить возвращаемое значение к любому типу.